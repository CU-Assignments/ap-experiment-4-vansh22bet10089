Aim- String Matching, Hashing, 
Heap: In this experiment, students 
will learn about String Matching, 
Hashing, and Heap data structures. 

Objective- The objective of this code is to solve the Maximum Subarray Problem, which is a classic algorithmic problem. The goal is to find the contiguous subarray within a one-dimensional array of numbers that has the largest sum. This problem is commonly solved using Kadane's Algorithm, which is an efficient approach with a time complexity of O(n).
#include <vector>
#include <algorithm>
#include <iostream>

class Solution {
public:
    int maxSubArray(std::vector<int>& nums) {
        int maxSum = nums[0];  // Initialize maxSum with the first element
        int currentSum = nums[0];  // Initialize currentSum with the first element
        
        for (int i = 1; i < nums.size(); i++) {
            // Choose between starting a new subarray or extending the existing one
            currentSum = std::max(nums[i], currentSum + nums[i]);
            
            // Update maxSum if currentSum is greater
            maxSum = std::max(maxSum, currentSum);
        }
        
        return maxSum;
    }
};

// Main function to test the solution
int main() {
    Solution solution;
    
    // Test case 1
    std::vector<int> nums1 = {-2,1,-3,4,-1,2,1,-5,4};
    std::cout << "Test case 1 output: " << solution.maxSubArray(nums1) << std::endl;
    
    // Test case 2
    std::vector<int> nums2 = {1};
    std::cout << "Test case 2 output: " << solution.maxSubArray(nums2) << std::endl;
    
    // Test case 3
    std::vector<int> nums3 = {5,4,-1,7,8};
    std::cout << "Test case 3 output: " << solution.maxSubArray(nums3) << std::endl;
    
    return 0;
}
